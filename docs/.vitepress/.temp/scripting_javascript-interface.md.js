import { ssrRenderAttrs, ssrRenderStyle } from "vue/server-renderer";
import { useSSRContext } from "vue";
import { _ as _export_sfc } from "./plugin-vue_export-helper.yVxbj29m.js";
const __pageData = JSON.parse('{"title":"JavaScript interface in Narrat","description":"Narrat can call JavaScript methods, use JavaScript variables, and run arbitrary JavaScript code for cases where you need to interact with the browser or the page.","frontmatter":{"title":"JavaScript interface in Narrat","description":"Narrat can call JavaScript methods, use JavaScript variables, and run arbitrary JavaScript code for cases where you need to interact with the browser or the page."},"headers":[],"relativePath":"scripting/javascript-interface.md","filePath":"scripting/javascript-interface.md","lastUpdated":1713010469000}');
const _sfc_main = { name: "scripting/javascript-interface.md" };
function _sfc_ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {
  _push(`<div${ssrRenderAttrs(_attrs)}><h2 id="js-api-for-narrat" tabindex="-1">JS API for Narrat <a class="header-anchor" href="#js-api-for-narrat" aria-label="Permalink to &quot;JS API for Narrat&quot;">​</a></h2><p>There are currently two commands that allow using JavaScript more directly in Narrat:</p><ul><li><code>call_js_method</code>: Calls a JavaScript method on the page.</li><li><code>run_js</code>: Builds a function from an arbitrary snippet of JavaScript code and runs it, returning the result.</li></ul><p>This is intended to be used in cases where you need to do something narrat scripting can&#39;t do, but don&#39;t want to bother adding a new command to the language via a <a href="https://docs.narrat.dev/plugins/plugins.html" target="_blank" rel="noreferrer">plugin</a></p><h2 id="call-js-method" tabindex="-1"><code>call_js_method</code> <a class="header-anchor" href="#call-js-method" aria-label="Permalink to &quot;\`call_js_method\`&quot;">​</a></h2><p>Syntax: <code>call_js_method [target] [method] [...args [optional]]</code></p><ul><li><code>target</code> [string|object]: The target object to call the method on. This can be an object, or a string that will be evaluated to an object. Examples: <code>$myVariable</code>, <code>&quot;document.body&quot;</code>, <code>&quot;localStorage&quot;</code>. Paths are evaluated in the context of the page, looking for the object in <code>window</code>.</li><li><code>method</code> [string]: The method to call on the target object.</li><li><code>args</code> [any]: Any number of arguments passed after the method will be passed to the JavaScript function being called too.</li></ul><p>Examples:</p><div class="language-narrat vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">narrat</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">test_js</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">  var</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> stuff (new Object)</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">  set</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> stuff.hello </span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">&quot;world&quot;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">  call_js_method localStorage setItem </span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">&quot;test_js&quot;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> (json_stringify </span><span style="${ssrRenderStyle({ "--shiki-light": "#E36209", "--shiki-dark": "#FFAB70" })}">$stuff</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">)</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">  var</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> stuff2 (json_parse (call_js_method localStorage getItem </span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">&quot;test_js&quot;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">))</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">  log</span><span style="${ssrRenderStyle({ "--shiki-light": "#E36209", "--shiki-dark": "#FFAB70" })}"> $stuff2</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">  var</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> canvas (call_js_method document createElement </span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">&quot;canvas&quot;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">)</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">  call_js_method document.body appendChild </span><span style="${ssrRenderStyle({ "--shiki-light": "#E36209", "--shiki-dark": "#FFAB70" })}">$canvas</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">  set</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> canvas.class </span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">&quot;test&quot;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">  call_js_method </span><span style="${ssrRenderStyle({ "--shiki-light": "#E36209", "--shiki-dark": "#FFAB70" })}">$canvas</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> requestPointerLock</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="run-js" tabindex="-1"><code>run_js</code> <a class="header-anchor" href="#run-js" aria-label="Permalink to &quot;\`run_js\`&quot;">​</a></h2><p>Syntax: <code>run_js [code]</code></p><ul><li><code>code</code> [string]: The JavaScript code to run.</li></ul><p>The code will be built using <code>Function</code>, in the format <code>return \${code}</code>. This will generate a function returning whatever <code>code</code> returns. The command then runs this function and returns the result.</p></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("scripting/javascript-interface.md");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const javascriptInterface = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender]]);
export {
  __pageData,
  javascriptInterface as default
};
