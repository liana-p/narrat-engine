import { ssrRenderAttrs, ssrRenderStyle } from "vue/server-renderer";
import { useSSRContext } from "vue";
import { _ as _export_sfc } from "./plugin-vue_export-helper.yVxbj29m.js";
const __pageData = JSON.parse('{"title":"All commands list","description":"This page contains a list of all the existing narrat commands","frontmatter":{"description":"This page contains a list of all the existing narrat commands"},"headers":[],"relativePath":"commands/all-commands.md","filePath":"commands/all-commands.md","lastUpdated":1713010469000}');
const _sfc_main = { name: "commands/all-commands.md" };
function _sfc_ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {
  _push(`<div${ssrRenderAttrs(_attrs)}><h1 id="all-commands-list" tabindex="-1">All commands list <a class="header-anchor" href="#all-commands-list" aria-label="Permalink to &quot;All commands list&quot;">​</a></h1><p>This page lists all available narrat commands as well as usage examples.</p><h2 id="dialog" tabindex="-1">Dialog <a class="header-anchor" href="#dialog" aria-label="Permalink to &quot;Dialog&quot;">​</a></h2><table><thead><tr><th>Command</th><th>Example</th><th>Description</th></tr></thead><tbody><tr><td><a href="./text-commands/talk-function.html">talk</a></td><td><code>talk player idle &quot;Hello everyone&quot;</code></td><td>Makes a character talk in a specific pose</td></tr><tr><td><a href="./text-commands/think-function.html">think</a></td><td><code>think player idle &quot;I wonder if they like me&quot;</code></td><td>Makes a character think in a specific pose (think is the same as talk but without quotes around)</td></tr><tr><td><a href="./text-commands/narrate-command.html">narrate</a></td><td><code>narrate &quot;Hello world&quot;</code></td><td>Writing text without a command will print that text as if it was said &quot;by the game&quot;, without a character</td></tr><tr><td><a href="./text-commands/narrate-command.html">text command</a> (Empty command)</td><td><code>&quot;Hello world&quot;</code></td><td>Same thing as the narrate command, but shorter</td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h2 id="basic-program-flow" tabindex="-1">Basic program flow <a class="header-anchor" href="#basic-program-flow" aria-label="Permalink to &quot;Basic program flow&quot;">​</a></h2><table><thead><tr><th>Command</th><th>Example</th><th>Description</th></tr></thead><tbody><tr><td><a href="./api-jump.html">jump</a></td><td><code>jump myLabel</code></td><td>Jumps to a label (stops current script)</td></tr><tr><td><a href="./../scripting/functions.html">run</a></td><td><code>run myLabel [arg1] [arg2] [...] // Returns whatever the label returned, if anything</code></td><td>Runs a label as a function with optional arguments passed to it, then continues back where the script was</td></tr><tr><td><a href="./../scripting/functions.html">return</a></td><td><code>return $test</code></td><td>Returns a value. Exits the current label and returns the first argument</td></tr><tr><td><a href="./if-function.html">if</a></td><td>if $data.hasFood:&quot;I have food, so we can eat a meal!&quot;else:&quot;We have nothing to eat&quot;</td><td>Runs a condition on the passed value. If the condition is true, the first branch is run. Otherwise, an optional <code>else:</code> branch can be provided for what to run when the condition fails</td></tr></tbody></table><h2 id="choices" tabindex="-1">Choices <a class="header-anchor" href="#choices" aria-label="Permalink to &quot;Choices&quot;">​</a></h2><table><thead><tr><th>Command</th><th>Example</th><th>Description</th></tr></thead><tbody><tr><td><a href="./choice-function.html">choice</a></td><td>choice:&quot;Would you like tea?&quot;&quot;Yes&quot;:&quot;Your friend serves you a cup of tea&quot;&quot;No&quot;:&quot;Your friend makes tea for themselves&quot;</td><td>Lets the player choose between two or more options. See the linked documentation for more info.</td></tr><tr><td><a href="./text-field.html">text_field</a></td><td><code>text_field &quot;A prompt text&quot;</code></td><td>Creates a text field for the player to enter text with a prompt. Returns the text entered</td></tr></tbody></table><h2 id="logic-operators-and-conditions" tabindex="-1">Logic operators and conditions <a class="header-anchor" href="#logic-operators-and-conditions" aria-label="Permalink to &quot;Logic operators and conditions&quot;">​</a></h2><table><thead><tr><th>Command</th><th>Example</th><th>Description</th></tr></thead><tbody><tr><td><a href="./logical-operators.html">==</a> ,<code>&gt;</code>, <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;=</code>, <code>!=</code></td><td><code>== 5 5 // Returns true</code></td><td>Comparison operators to check if things are equal/unequal/lower than/etc</td></tr><tr><td><a href="./logical-operators.html">!</a></td><td>if (! $data.doorOpen):&quot;The door is closed&quot;</td><td>Negates a value</td></tr><tr><td><a href="./logical-operators.html">&amp;&amp;, ||</a></td><td><code>if (|| $data.doorOpen $data.hasKey):</code></td><td>And and Or logical operators</td></tr><tr><td><a href="./logical-operators.html">?</a></td><td><code>var isDead (? (&lt;= $data.life 0) true : false)</code></td><td>Ternary operator</td></tr></tbody></table><h2 id="math-and-arithmetic" tabindex="-1">Math and arithmetic <a class="header-anchor" href="#math-and-arithmetic" aria-label="Permalink to &quot;Math and arithmetic&quot;">​</a></h2><table><thead><tr><th>Command</th><th>Example</th><th>Description</th></tr></thead><tbody><tr><td><a href="./math-commands/arithmetic-operators.html">+</a></td><td><code>+ 1 2 // Returns 3</code></td><td>Adds numbers passed as arguments</td></tr><tr><td><a href="./math-commands/arithmetic-operators.html">-</a></td><td><code>- 2 1 // Returns 1</code></td><td>Substracts the first number passed with the others</td></tr><tr><td><a href="./math-commands/arithmetic-operators.html">*</a></td><td><code>* 2 3 // Returns 6</code></td><td>Multiplies the numbers together</td></tr><tr><td><a href="./math-commands/arithmetic-operators.html">/</a></td><td><code>/ 1 2 // Returns 0.5</code></td><td>Divides the first number by the others, in sequence</td></tr><tr><td><a href="./math-commands/other-math-operations.html">min</a></td><td><code>min 100 50 // Returns 50</code></td><td>Returns the smallest value passed</td></tr><tr><td><a href="./math-commands/other-math-operations.html">max</a></td><td><code>max 50 100 // Returns 100</code></td><td>Returns the highest value passed</td></tr><tr><td><a href="./math-commands/other-math-operations.html">clamp</a></td><td><code>clamp 0 100 $data.playerHealth</code> If playerHealth is below 0, return 0. If playerHealth is between 0 and 100, returns it. If playerHealth is over 100, returns 100</td><td>Returns the third value passed, constrained between a minimum and maximum value passed as the first two parameters</td></tr><tr><td><a href="./math-commands/other-math-operations.html">floor</a></td><td><code>floor 0.75 // Returns 0</code></td><td>Rounds a number, rounding down</td></tr><tr><td><a href="./math-commands/other-math-operations.html">ceil</a></td><td><code>ceil 0.25 // Returns 1</code></td><td>Rounds a number, rounding up</td></tr><tr><td><a href="./math-commands/other-math-operations.html">round</a></td><td><code>round 0.5 // Returns 1</code></td><td>Rounds a number to the nearest integer</td></tr><tr><td><a href="./math-commands/other-math-operations.html">sqrt</a></td><td><code>sqrt 4 // Returns 2</code></td><td>Returns the square root of a number</td></tr><tr><td><a href="./math-commands/other-math-operations.html">^</a></td><td><code>^ 3 2 // Returns 9</code></td><td>Returns the first number to the power of the second number</td></tr></tbody></table><h2 id="audio" tabindex="-1">Audio <a class="header-anchor" href="#audio" aria-label="Permalink to &quot;Audio&quot;">​</a></h2><table><thead><tr><th>Command</th><th>Example</th><th>Description</th></tr></thead><tbody><tr><td><a href="./audio/play-function.html#play-function">play</a></td><td><code>play music myMusic [channel]</code></td><td>Plays the music <code>myMusic</code> in the mode <code>music</code> (possible modes: <code>music</code>, <code>ambiance, sound), with an optional channel number</code></td></tr><tr><td><a href="./audio/pause.html">pause</a></td><td><code>pause music [channel]</code></td><td>Pauses a music mode with an optional channel number</td></tr><tr><td>[resume]((audio/pause.md) /resume.md)</td><td><code>resume music [channel]</code></td><td>Resumes a music mode with an optional channel number</td></tr><tr><td><a href="./audio/stop.html">stop</a></td><td><code>stop music [channel]</code></td><td>Same as pause but stops</td></tr></tbody></table><h2 id="items" tabindex="-1">Items <a class="header-anchor" href="#items" aria-label="Permalink to &quot;Items&quot;">​</a></h2><table><thead><tr><th>Command</th><th>Example</th><th>Description</th></tr></thead><tbody><tr><td><a href="./../features/inventory.html">add_item</a></td><td><code>add_item bread 1</code></td><td>Adds an amount of an item to the player</td></tr><tr><td><a href="./../features/inventory.html">remove_item</a></td><td><code>remove_item bread 1</code></td><td>Removes an amount of an item</td></tr><tr><td><a href="./../features/inventory.html">has_item?</a></td><td>if (has_item? bread 1):&quot;Let&#39;s eat bread!&quot;</td><td>Returns true if there is enough of the item</td></tr><tr><td><a href="./../features/inventory.html">item_amount?</a></td><td><code>item_amount? bread // returns the amount of bread</code></td><td>Returns the amount of an item the player has</td></tr><tr><td><a href="./../features/items.html#interaction-tags">enable_interaction</a></td><td><code>enable_interaction mytag</code></td><td>Enables an interaction tag (see docs)</td></tr><tr><td><a href="./../features/items.html#interaction-tags"><code>disable_interaction</code></a></td><td><code>disable_interaction mytag</code></td><td>Disables an interaction tag (see docs)</td></tr></tbody></table><h2 id="achievements" tabindex="-1">Achievements <a class="header-anchor" href="#achievements" aria-label="Permalink to &quot;Achievements&quot;">​</a></h2><table><thead><tr><th>Command</th><th>Example</th><th>Description</th></tr></thead><tbody><tr><td><a href="./../features/achievements.html">unlock_achievement</a></td><td><code>unlock_achievement win_game</code></td><td>Unlocks an achievement</td></tr><tr><td><a href="./../features/achievements.html">has_achievement?</a></td><td><code>set data.hasWon (has_achievement? win_game)</code></td><td>Returns true if the player has the passed achievement, otherwise false</td></tr></tbody></table><h2 id="notifications" tabindex="-1">Notifications <a class="header-anchor" href="#notifications" aria-label="Permalink to &quot;Notifications&quot;">​</a></h2><table><thead><tr><th>Command</th><th>Example</th><th>Description</th></tr></thead><tbody><tr><td><a href="./notify/"><code>notify</code></a></td><td><code>notify &quot;Hello world&quot;</code></td><td>Adds a notification to the game</td></tr><tr><td><a href="./notify/disable-or-enable-notifications.html">disable_notifications</a></td><td><code>disable_notifications</code></td><td>Disables all notifications</td></tr><tr><td><a href="./notify/disable-or-enable-notifications.html">enable_notifications</a></td><td><code>enable_notifications</code></td><td>Enables notifications</td></tr></tbody></table><h2 id="quests" tabindex="-1">Quests <a class="header-anchor" href="#quests" aria-label="Permalink to &quot;Quests&quot;">​</a></h2><table><thead><tr><th>Command</th><th>Example</th><th>Description</th></tr></thead><tbody><tr><td><a href="./../features/quests.html">start_quest</a></td><td><code>start_quest myQuest</code></td><td>Starts a quest</td></tr><tr><td><a href="./../features/quests.html">complete_quest</a></td><td><code>complete_quest myQuest</code></td><td>Completes a quest</td></tr><tr><td><code>[\`start_objective\`](../features/quests.md)</code></td><td><code>start_objective myQuest myObjective</code></td><td>Starts an objective in a quest (useful for quests with hidden objectives)</td></tr><tr><td><a href="./../features/quests.html">complete_objective</a></td><td><code>complete_objective myQuest myObjective</code></td><td>Completes an objective</td></tr><tr><td><a href="./../features/quests.html">quest_completed?</a></td><td><code>quest_completed? myQuest // returns true or false</code></td><td>Check if a quest is completed</td></tr><tr><td><a href="./../features/quests.html">objective_completed?</a></td><td><code>objective_completed? myQuest myObjective //returns true or false</code></td><td>Check if a quest objective is completed</td></tr><tr><td><a href="./../features/quests.html">quest_started?</a></td><td><code>quest_started? myQuest // Returns true or false</code></td><td>Check if a quest is started</td></tr><tr><td><a href="./../features/quests.html">objective_started?</a></td><td><code>objective_started? myQuest myObjective // Returns true or false</code></td><td>Check if a quest objective is started</td></tr></tbody></table><h2 id="random" tabindex="-1">Random <a class="header-anchor" href="#random" aria-label="Permalink to &quot;Random&quot;">​</a></h2><table><thead><tr><th>Command</th><th>Example</th><th>Description</th></tr></thead><tbody><tr><td><a href="./random-generation.html">random</a></td><td><code>random 0 100 // Returns a random integer between 0 and 100 </code></td><td>Returns a random integer between two numbers passed (inclusive)</td></tr><tr><td><a href="./random-generation.html">random_float</a></td><td><code>random_float 0 100 // Returns a random float between 0 and 100 </code></td><td>Returns a random float between two numbers passed (inclusive)</td></tr><tr><td><a href="./random-generation.html">random_from_args</a></td><td><code>random_from_args 1 2 3 4 5 // Returns a random argument passed </code></td><td>Returns a random argument passed</td></tr><tr><td>random_from_array</td><td><code>random_from_array $data.myArray // Returns a random element from the array</code></td><td>Returns a random element from an array</td></tr></tbody></table><h2 id="viewport-screen-and-buttons" tabindex="-1">Viewport screen and buttons <a class="header-anchor" href="#viewport-screen-and-buttons" aria-label="Permalink to &quot;Viewport screen and buttons&quot;">​</a></h2><table><thead><tr><th>Command</th><th>Example</th><th>Description</th></tr></thead><tbody><tr><td><a href="./left-side-viewport-commands/set-screen.html">set_screen</a></td><td><code>set_screen myScreen [layer]</code></td><td>Sets the screen to a screen with the given ID with an optional layer number (default 0)</td></tr><tr><td><a href="./left-side-viewport-commands/empty-layer.html">empty_layer</a></td><td><code>empty_layer 0</code></td><td>Removes all items from a layer</td></tr><tr><td><a href="./left-side-viewport-commands/set-button.html">set_button</a></td><td><code>set_button myButton true</code></td><td>changes the value of a button (true, false, hidden) ID</td></tr></tbody></table><h2 id="variables" tabindex="-1">Variables <a class="header-anchor" href="#variables" aria-label="Permalink to &quot;Variables&quot;">​</a></h2><table><thead><tr><th>Command</th><th>Example</th><th>Description</th></tr></thead><tbody><tr><td><a href="./modifying-variables/set-function.html">set</a></td><td><code>set data.playerHealth 100</code></td><td>Sets a variable to a value</td></tr><tr><td><a href="./modifying-variables/add-function.html">add</a></td><td><code>add data.playerHealth 10</code></td><td>Adds a value to a variable</td></tr><tr><td><code>var</code></td><td><code>var test 3</code></td><td>Declares a local variable with a value. The variable will only exist in the current label and will stop existing once the label is exited.</td></tr></tbody></table><h2 id="skills" tabindex="-1">Skills <a class="header-anchor" href="#skills" aria-label="Permalink to &quot;Skills&quot;">​</a></h2><table><thead><tr><th>Command</th><th>Example</th><th>Description</th></tr></thead><tbody><tr><td><a href="./skills-commands/add-level.html">add_level</a></td><td><code>add_level agility 1</code></td><td>Adds levels to a skill</td></tr><tr><td><a href="./skills-commands/set-level.html">set_level</a></td><td><code>set_level agility 1</code></td><td>Sets the level of a skill</td></tr><tr><td><a href="./skills-commands/add-xp.html">add_xp</a></td><td><code>add_xp agility 10</code></td><td>Adds experience to a skill</td></tr><tr><td><a href="./skills-commands/get-level.html">get_level</a></td><td><code>get_level agility</code></td><td>Gets the level of a skill</td></tr><tr><td><a href="./skills-commands/get-xp.html">get_xp</a></td><td><code>get_xp agility</code></td><td>Gets the experience of a skill</td></tr><tr><td><a href="./skills-commands/roll.html">roll</a></td><td><code>roll mySkillCheck agility 50 // Returns true or false</code></td><td>Runs a skill check with a certain difficulty against a skill dice</td></tr><tr><td><code>get_skill_check</code></td><td><code>get_skill_check mySkillCheck // Returns a skill check&#39;s state</code></td><td>Gets the result of a skill check (object with <code>happened</code>, <code>succeeded</code>, and <code>hidden</code> booleans)</td></tr><tr><td><code>skill_check_result</code></td><td><code>skill_check_result mySkillCheck // Returns true or false</code></td><td>Gets the result of a skill check as boolean</td></tr><tr><td><a href="./skills-commands/reset-roll.html">reset_roll</a></td><td><code>reset_roll mySkillCheck</code></td><td>Resets a skill check</td></tr></tbody></table><h2 id="stats" tabindex="-1">Stats <a class="header-anchor" href="#stats" aria-label="Permalink to &quot;Stats&quot;">​</a></h2><table><thead><tr><th>Command</th><th>Example</th><th>Description</th></tr></thead><tbody><tr><td><a href="/commands/stats/add-stat.html">add_stat</a></td><td><code>add_stat myStat 10</code></td><td>Adds a value to a stat</td></tr><tr><td><a href="/commands/stats/set-stat.html">set_stat</a></td><td><code>set_stat myStat 10</code></td><td>Sets a stat to a value</td></tr><tr><td><a href="/commands/stats/get-stat-value.html">get_stat_value</a></td><td><code>get_stat_value myStat</code></td><td>Gets the value of a stat</td></tr><tr><td>show_hud</td><td><code>show_hud</code></td><td>Shows the HUD</td></tr><tr><td>hide_hud</td><td><code>hide_hud</code></td><td>Hides the HUD</td></tr></tbody></table><h2 id="arrays" tabindex="-1">Arrays <a class="header-anchor" href="#arrays" aria-label="Permalink to &quot;Arrays&quot;">​</a></h2><p>Imagine $data.myArray contains an array with [25, 50, 75]</p><table><thead><tr><th>Command</th><th>Example</th><th>Description</th></tr></thead><tbody><tr><td>new</td><td><code>set data.myArray (new Array)</code></td><td>Creates an array</td></tr><tr><td>push</td><td><code>push $data.myArray 100</code></td><td>Adds a value at the end of an array</td></tr><tr><td>pop</td><td><code>pop $data.myArray // Returns 100</code></td><td>Removes the last value of an array, returning it</td></tr><tr><td>shift</td><td><code>shift $data.myArray // Returns 25</code></td><td>Removes the first value of an array, returning it</td></tr><tr><td>array_join</td><td><code>array_join $data.myArray &quot;, &quot; // Returns &quot;25, 50, 75&quot;</code></td><td>Joins an array into a string, with the second parameter being the separator to use</td></tr><tr><td>array_concat</td><td><code>array_concat $data.myArray $data.myArray2 // Returns [25, 50, 75, 100, 125]</code></td><td>Concatenates two arrays</td></tr><tr><td>includes</td><td><code>includes $data.myArray 25 // Returns true</code></td><td>Checks if an array includes a value</td></tr><tr><td>reverse</td><td><code>reverse $data.myArray // Returns [75, 50, 25]</code></td><td>Reverses an array</td></tr><tr><td>slice</td><td><code>slice $data.myArray 1 2 // Returns [50, 75] </code></td><td>Returns a slice of an array, with the first parameter being the start index and the second being the end index</td></tr><tr><td>splice</td><td><code>splice $data.myArray 1 2 // Returns [50, 75]</code></td><td>Removes a slice of an array, with the first parameter being the start index and the second being the number of elements to remove. Returns the sliced elements</td></tr><tr><td>random_from_array</td><td><code>random_from_array $data.myArray // Returns a random element from the array</code></td><td>Returns a random element from an array</td></tr><tr><td>shuffle</td><td><code>shuffle $data.myArray // Returns a shuffled array</code></td><td>Shuffles an array</td></tr><tr><td>entries</td><td><code>entries $data.myArray // Returns [[0, 25], [1, 50], [2, 75]]</code></td><td>Returns an array of arrays, each containing the index and value of the original array&#39;s elements</td></tr></tbody></table><h2 id="array-transformation-functions" tabindex="-1">Array transformation functions <a class="header-anchor" href="#array-transformation-functions" aria-label="Permalink to &quot;Array transformation functions&quot;">​</a></h2><p>Those functions loop through arrays to perform an operation on each element. Most of them take a <code>predicate</code> parameter, which should be the name of a narrat label that will be called on each element.</p><p>The predicate gets given three parameters:</p><ul><li><code>element</code>: The array element for the current iteration</li><li><code>index</code>: The index of the current iteration</li><li><code>array</code>: The array being iterated over</li></ul><p>Some of those functions may take different parameters though.</p><p>Example:</p><div class="language-narrat vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">narrat</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">test_arrays</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">  var</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> simple (new Array </span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">&quot;a&quot;</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> &quot;b&quot;</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> &quot;c&quot;</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> &quot;d&quot;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">)</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">  var</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> index (array_find_index </span><span style="${ssrRenderStyle({ "--shiki-light": "#E36209", "--shiki-dark": "#FFAB70" })}">$simple</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> test_find)</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">  &quot;Index: %{</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">$index</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">}&quot;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">  var</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> mapped_array (array_map </span><span style="${ssrRenderStyle({ "--shiki-light": "#E36209", "--shiki-dark": "#FFAB70" })}">$simple</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> test_map)</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">  var</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> concatenated (array_join </span><span style="${ssrRenderStyle({ "--shiki-light": "#E36209", "--shiki-dark": "#FFAB70" })}">$mapped_array</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> &quot;, &quot;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">)</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">  &quot;Concatenated: %{</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">$concatenated</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">}&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">test_forEach element index array</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">  &quot;For each: %{</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">$element</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">} %{</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">$index</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">} %{</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">$array</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">}&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">test_find element index array</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">  if</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> (</span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">== </span><span style="${ssrRenderStyle({ "--shiki-light": "#E36209", "--shiki-dark": "#FFAB70" })}">$element</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> &quot;c&quot;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">):</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">    return</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}"> true</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">  else</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">    return</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}"> false</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">test_map element index array</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">  return</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> (</span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">concat</span><span style="${ssrRenderStyle({ "--shiki-light": "#E36209", "--shiki-dark": "#FFAB70" })}"> $element</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> &quot; mapped&quot;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>Most of those functions have an API based on similar JavaScript equivalents, which you can find <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries" target="_blank" rel="noreferrer">on the MDN documentation</a>.</p><table><thead><tr><th>Command</th><th>Example</th><th>Description</th></tr></thead><tbody><tr><td>array_find_index</td><td><code>var index (array_find_index $array test_find)</code></td><td>Will run the <code>test_find</code> label with values passed from the array until it returns true, at which point it will return that index. If nothing is found, it will return -1</td></tr><tr><td>array_find</td><td><code>var element (array_find $array test_find)</code></td><td>Will run the <code>test_find</code> label with values passed from the array until it returns true, at which point it will return that element. If nothing is found, it will return null</td></tr><tr><td>array_filter</td><td><code>var filtered (array_filter $array test_filter)</code></td><td>Will run the <code>test_filter</code> label with values passed from the array. Every element for which <code>test_filter</code> returns true will be added to the new result array that gets returned at the end</td></tr><tr><td>array_map</td><td><code>var mapped (array_map $array test_map)</code></td><td>Will run the <code>test_map</code> label with values passed from the array. A new resulting array is created which gets as values the return values of <code>test_map</code> passed for each element</td></tr><tr><td>array_reduce</td><td><code>var reduced (array_reduce $array test_reduce 0)</code></td><td>Will run the <code>test_reduce</code> label with values passed from the array. Before the element, index and array parameters the test_reduce function will reduce the current accumulated reduced value, starting with the initial value passed in the initial call (<code>0</code> here)</td></tr><tr><td>array_some</td><td><code>var some (array_some $array test_some)</code></td><td>Will run the <code>test_some</code> label with values passed from the array. If any of the calls to <code>test_some</code> return true, the function will return true. If none of them do, it will return false</td></tr><tr><td>array_every</td><td><code>var every (array_every $array test_every)</code></td><td>Will run the <code>test_every</code> label with values passed from the array. If all of the calls to <code>test_every</code> return true, the function will return true. If any of them don&#39;t, it will return false</td></tr></tbody></table><h2 id="object-commands" tabindex="-1">Object Commands <a class="header-anchor" href="#object-commands" aria-label="Permalink to &quot;Object Commands&quot;">​</a></h2><p>imagine we have the following object:</p><div class="language-narrat vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">narrat</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">main</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">  var</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> test_object (new Object)</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">  set</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> test_object.a </span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">&quot;hello&quot;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">  set</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> test_object.b </span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">&quot;world&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><table><thead><tr><th>Command</th><th>Example</th><th>Description</th></tr></thead><tbody><tr><td>object_keys</td><td><code>var keys (object_keys $array)</code></td><td>Returns an array with the keys in the object. In this case would return [&quot;a&quot;, &quot;b&quot;]</td></tr><tr><td>object_values</td><td><code>var values (object_values $array)</code></td><td>Returns an array with the values in the object. In this case would return [&quot;hello&quot;, &quot;world&quot;]</td></tr><tr><td>object_entries</td><td><code>var entries (object_entries $array)</code></td><td>Returns an array with the entries in the object. In this case would return [[&quot;a&quot;, &quot;hello&quot;], [&quot;b&quot;, &quot;world&quot;]]</td></tr><tr><td>object_has</td><td><code>var has (object_has $array &quot;a&quot;)</code></td><td>Returns true if the object has the given key, false otherwise</td></tr></tbody></table><h2 id="for-loop-commands" tabindex="-1">For loop commands <a class="header-anchor" href="#for-loop-commands" aria-label="Permalink to &quot;For loop commands&quot;">​</a></h2><p>Narrat doesn&#39;t have proper support for loops yet, but those two commands can help give similar functionality (they work on both arrays and objects).</p><p>Imagine we have the following test array:</p><div class="language-narrat vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">narrat</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">main</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">  var</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> test_array (new Array </span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">&quot;a&quot;</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> &quot;b&quot;</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> &quot;c&quot;</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> &quot;d&quot;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">)</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">do_things element</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">  &quot;Element: %{</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">$element</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">}&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><table><thead><tr><th>Command</th><th>Example</th><th>Description</th></tr></thead><tbody><tr><td>for_of</td><td><code>for_of $test_array do_things</code></td><td>Will run the <code>do_things</code> label once for each element in the array, passing the <code>element</code> as the first property. This one iterates over <em>values</em></td></tr><tr><td>for_in</td><td><code>for_in $test_array do_things</code></td><td>Will run the <code>do_things</code> label once for each element in the array, passing the <code>index</code> (or <code>key</code> if an object) as the first property. This one iterates over <em>keys</em></td></tr></tbody></table><h2 id="time" tabindex="-1">Time <a class="header-anchor" href="#time" aria-label="Permalink to &quot;Time&quot;">​</a></h2><table><thead><tr><th>Command</th><th>Example</th><th>Description</th></tr></thead><tbody><tr><td>time_now</td><td><code>var now (time_now) // returns current time in ms</code></td><td>Returns the current unix timestamp in miliseconds</td></tr><tr><td>total_playtime</td><td><code>var time_played (total_playtime)</code></td><td>Returns the current total playtime for this save file</td></tr><tr><td>session_playtime</td><td><code>var time_played (session_playtime)</code></td><td>Returns the current session playtime</td></tr><tr><td>to_days</td><td><code>var days (to_days 100000)</code></td><td>Converts a time in ms to days</td></tr><tr><td>to_hours</td><td><code>var hours (to_hours 100000)</code></td><td>Converts a time in ms to hours</td></tr><tr><td>to_minutes</td><td><code>var minutes (to_minutes 100000)</code></td><td>Converts a time in ms to minutes</td></tr><tr><td>to_seconds</td><td><code>var seconds (to_seconds 100000)</code></td><td>Converts a time in ms to seconds</td></tr></tbody></table><h2 id="strings" tabindex="-1">Strings <a class="header-anchor" href="#strings" aria-label="Permalink to &quot;Strings&quot;">​</a></h2><table><thead><tr><th>Command</th><th>Example</th><th>Description</th></tr></thead><tbody><tr><td><a href="./string-commands/concat.html">concat</a></td><td><code>concat &quot;Hello&quot; &quot;World&quot;</code></td><td>Concatenates two or more strings</td></tr><tr><td><a href="./string-commands/join.html">join</a></td><td><code>join &quot;, &quot; &quot;Hello&quot; &quot;World&quot;</code></td><td>Joins x strings, with the first character being the join string between them</td></tr><tr><td><a href="./string-commands/split.html">split</a></td><td><code>split &quot; &quot; &quot;Hello World&quot;</code></td><td>Splits a string into an array by the splitting character</td></tr><tr><td>str_search</td><td><code>var result (str_search &quot;Hello world&quot; &quot;world&quot;)</code></td><td>Searches for a substring in a string and returns the index of the first occurrence. Returns -1 if not found.</td></tr><tr><td>regex_search</td><td><code>var result (regex_search &quot;Hello world&quot; &quot;world&quot;)</code></td><td>Searches for a regex pattern in a string and returns the index of the first occurrence. Returns -1 if not found.</td></tr></tbody></table><h2 id="screen-objects" tabindex="-1">Screen Objects <a class="header-anchor" href="#screen-objects" aria-label="Permalink to &quot;Screen Objects&quot;">​</a></h2><p>See <a href="./../features/dynamic-sprites-text-objects.html">Dynamic sprites and text documentation</a> for info on how to use screen objects.</p><table><thead><tr><th>Command</th><th>Example</th><th>Description</th></tr></thead><tbody><tr><td>create_sprite</td><td><code>create_sprite img/character.png 55 125</code></td><td>Creates a sprite using an image at a position</td></tr><tr><td>create_object</td><td><code>create_object 55 125</code></td><td>Creates an object at a position</td></tr><tr><td>delete_sprite</td><td><code>delete_sprite $mySprite</code></td><td>Deletes a sprite (stored in a variable)</td></tr><tr><td>empty_sprites</td><td><code>empty_sprites [optional layer number]</code></td><td>Deletes all sprites, on specified layer or all layers if no layer is passed</td></tr></tbody></table><h2 id="characters" tabindex="-1">Characters <a class="header-anchor" href="#characters" aria-label="Permalink to &quot;Characters&quot;">​</a></h2><p>It is possible to change which character is used by the player (which is used when making choices). See the <a href="./../features/changing-player-character.html">changing player character feature docs</a> for more info.</p><table><thead><tr><th>Command</th><th>Example</th><th>Description</th></tr></thead><tbody><tr><td>change_player_character</td><td><code>change_player_character player_2</code></td><td>Will use <code>player_2</code> as the character for the player&#39;s words in choices etc.</td></tr><tr><td>change_game_character</td><td><code>change_game_character game_2</code></td><td>Changes the default character used to represent the game (by default is a character with no name)</td></tr></tbody></table><h2 id="interfacing-with-javascript" tabindex="-1">Interfacing with JavaScript <a class="header-anchor" href="#interfacing-with-javascript" aria-label="Permalink to &quot;Interfacing with JavaScript&quot;">​</a></h2><p>Narrat can interface with JavaScript more directly thanks for a few functions:</p><p>| Command | Example | Description | | <a href="./../scripting/javascript-interface.html">call_js_method</a> | <code>call_js_method [target] [method] [...options]</code> or <code>call_js_method document createElement canvas</code> | Calls the JS function [method] on the object [target] with any other arguments passed. <code>target</code> can either be an object, or a string. If it&#39;s a string, the engine will try to find the object inside <code>window</code>. For example <code>call_js_method document.body appendChild $canvas</code> will be equivalent to <code>window.document.body.appendChild($canvas)</code> (with $canvas being the value of the $canvas variable in narrat here) | | <a href="./../scripting/javascript-interface.html">run_js</a> | <code>run_js &quot;1 + 2&quot;</code> | Runs a piece of JavaScript and returns the result. This is equivalent to using JavaScript <code>eval</code>, but is implemented <a href="https://www.educative.io/answers/eval-vs-function-in-javascript" target="_blank" rel="noreferrer">with the <code>Function</code> constructor</a>. <em>Note:</em> This is considered inefficient and unsafe. You should never do this if your game contains user-entered scripts. |</p><h2 id="others" tabindex="-1">Others <a class="header-anchor" href="#others" aria-label="Permalink to &quot;Others&quot;">​</a></h2><table><thead><tr><th>command</th><th>example</th><th>description</th></tr></thead><tbody><tr><td><a href="./clear-dialog.html">clear_dialog</a></td><td><code>clear_dialog</code></td><td>Clears the dialog panel</td></tr><tr><td>log</td><td><code>log &quot;what&#39;s the value of test? %{test}&quot; // Will print this log in the console</code></td><td>Prints a log in the browser developer tools. Useful for debugging or checking variable values</td></tr><tr><td>menu_return</td><td><code>menu_return</code></td><td>Exits the game and returns to the main menu</td></tr><tr><td><a href="./save-commands.html#save">save</a></td><td><code>save [save file name]</code></td><td>Opens the manual save screen for the player to save the game (optional parameter for the name of the save file, useful to pass the name of the level/chapter for example)</td></tr><tr><td><code>reset_global_save</code></td><td><code>reset_global_save</code></td><td>Resets the global part of the save</td></tr><tr><td><a href="./save-commands.html#save_prompt">save_prompt</a></td><td><code>save_prompt [save file name]</code></td><td>Same as save, but asks the user if they want to save first</td></tr><tr><td><a href="./wait.html">wait</a></td><td><code>wait 500</code></td><td>Makes the script pause for x milliseconds</td></tr><tr><td>load_data</td><td><code>set data.myData (load_data data/myDataFile.yaml)</code></td><td>Loads data from the data file path passed and returns it</td></tr><tr><td><code>json_stringify</code></td><td><code>var jsonString (json_stringify $data.myData)</code></td><td>Converts an object to a JSON string</td></tr><tr><td><code>json_parse</code></td><td><code>var myObject (json_parse jsonString)</code></td><td>Converts a JSON string to an object</td></tr><tr><td><a href="https://docs.narrat.dev/features/animations.html" target="_blank" rel="noreferrer">animate</a></td><td><code>animate .dialog long-screenshake 150 20</code></td><td>Animates an element with a preconfigured animations. See linked docs for details</td></tr><tr><td><a href="https://docs.narrat.dev/features/animations.html" target="_blank" rel="noreferrer">animate_wait</a></td><td><code>animate_wait .dialog long-screenshake 150 20</code></td><td>Same as animate, but waits for the animation to finish before continuing</td></tr></tbody></table></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("commands/all-commands.md");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const allCommands = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender]]);
export {
  __pageData,
  allCommands as default
};
