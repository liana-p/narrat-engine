import { ssrRenderAttrs, ssrRenderStyle } from "vue/server-renderer";
import { useSSRContext } from "vue";
import { _ as _export_sfc } from "./plugin-vue_export-helper.yVxbj29m.js";
const __pageData = JSON.parse('{"title":"Game settings feature","description":"The narrat custom game settings feature allows easy creation of automatic settings menus editable by the player","frontmatter":{"title":"Game settings feature","description":"The narrat custom game settings feature allows easy creation of automatic settings menus editable by the player"},"headers":[],"relativePath":"features/game-settings.md","filePath":"features/game-settings.md","lastUpdated":1687862260000}');
const _sfc_main = { name: "features/game-settings.md" };
function _sfc_ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {
  _push(`<div${ssrRenderAttrs(_attrs)}><h1 id="game-settings" tabindex="-1">Game Settings <a class="header-anchor" href="#game-settings" aria-label="Permalink to &quot;Game Settings&quot;">​</a></h1><p>In Narrat games, the <code>System</code> menu displays various common settings. Those settings can be extended by any game to add custom game-specific settings that players can edit via the same menu, and are accessible by game scripts.</p><h2 id="how-to-add-custom-settings" tabindex="-1">How to add custom settings <a class="header-anchor" href="#how-to-add-custom-settings" aria-label="Permalink to &quot;How to add custom settings&quot;">​</a></h2><p>Custom settings are defined in the <code>config.yaml</code> file of the game. To create a new setting, its schema needs to be added to the list of custom settings. The schema describes the type of setting, as well as info like its name and description.</p><p>Imagine you want a custom setting to disable spider content for people with arachnophobia. In <code>config.yaml</code>:</p><div class="language-yaml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#22863A", "--shiki-dark": "#85E89D" })}">settings</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#22863A", "--shiki-dark": "#85E89D" })}">  customSettings</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#22863A", "--shiki-dark": "#85E89D" })}">    arachnophobia</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#22863A", "--shiki-dark": "#85E89D" })}">      type</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">: </span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">boolean</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#22863A", "--shiki-dark": "#85E89D" })}">      defaultValue</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">: </span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">false</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#22863A", "--shiki-dark": "#85E89D" })}">      name</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">: </span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">&#39;Disable Arachnophobia&#39;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#22863A", "--shiki-dark": "#85E89D" })}">      description</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">: </span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">&#39;Turning this on will censor spider imagery and descriptions in the game&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>Adding those custom settings to the game&#39;s config will make them appear in the System menu, alongside existing default settings.</p><h2 id="available-settings-types" tabindex="-1">Available settings types <a class="header-anchor" href="#available-settings-types" aria-label="Permalink to &quot;Available settings types&quot;">​</a></h2><ul><li><code>number</code>: A floating number. Props: <code>defaultValue</code>, <code>minValue</code>, <code>maxValue</code> which are used to setup a number slider</li><li><code>integer</code>: Same as the previous one, but the number will be rounded</li><li><code>boolean</code>: A boolean. Props: <code>defaultValue</code></li><li><code>string</code>: A string. Props: <code>defaultValue</code></li></ul><p>All settings need to specify the <code>type</code> property, as well as <code>name</code> and <code>description</code></p><h2 id="usage-in-scripts" tabindex="-1">Usage in scripts <a class="header-anchor" href="#usage-in-scripts" aria-label="Permalink to &quot;Usage in scripts&quot;">​</a></h2><p>To use custom settings in script, new commands <code>get_setting</code> and <code>set_setting</code> are be available:</p><div class="language-narrat vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">narrat</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">main</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">  set</span><span style="${ssrRenderStyle({ "--shiki-light": "#E36209", "--shiki-dark": "#FFAB70" })}"> $data.noSpiders</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> (get_setting arachnophobia)</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">change_setting</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">  set_setting arachnophobia </span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">false</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>You can also access settings directly as variables:</p><div class="language-narrat vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">narrat</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">main</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">  talk</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> helper idle </span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">&quot;Hello, %{</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">customSettings.playerName</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">}&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="default-settings" tabindex="-1">Default Settings <a class="header-anchor" href="#default-settings" aria-label="Permalink to &quot;Default Settings&quot;">​</a></h2><p>Those base settings are already part of the engine by default:</p><ul><li><code>textSpeed</code>: [number] The speed at which the text animates (which also controls auto play delay when not animating)</li><li><code>animateText</code>: [boolean] Toggle text animation</li><li><code>fontSize</code>: [number] Base size of the body font (if your CSS uses <code>rem</code> units, changing this font size should generally change all fonts in the game).</li></ul></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("features/game-settings.md");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const gameSettings = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender]]);
export {
  __pageData,
  gameSettings as default
};
