import { ssrRenderAttrs, ssrRenderStyle } from "vue/server-renderer";
import { useSSRContext } from "vue";
import { _ as _export_sfc } from "./plugin-vue_export-helper.yVxbj29m.js";
const __pageData = JSON.parse('{"title":"Narrat Plugin API","description":"The Narrat plugin API allows for extending engine features with custom code.","frontmatter":{"title":"Narrat Plugin API","description":"The Narrat plugin API allows for extending engine features with custom code."},"headers":[],"relativePath":"plugins/plugins.md","filePath":"plugins/plugins.md","lastUpdated":1696787257000}');
const _sfc_main = { name: "plugins/plugins.md" };
function _sfc_ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {
  _push(`<div${ssrRenderAttrs(_attrs)}><div class="danger custom-block"><p class="custom-block-title">DANGER</p><p>The plugin API documentation is a work in progress, and the plugin API is being improved over time. Don&#39;t hesitate to ask on Discord for help with plugin development</p></div><h2 id="available-plugins" tabindex="-1">Available plugins <a class="header-anchor" href="#available-plugins" aria-label="Permalink to &quot;Available plugins&quot;">​</a></h2><ul><li><a href="./godot/godot-plugin.html">Godot 4 Plugin</a></li></ul><h1 id="plugin-api" tabindex="-1">Plugin API <a class="header-anchor" href="#plugin-api" aria-label="Permalink to &quot;Plugin API&quot;">​</a></h1><p>The plugin API allows anyone to extend the engine&#39;s functionality using native TypeScript code and/or custom Vue.js components for UI.</p><h2 id="features" tabindex="-1">Features <a class="header-anchor" href="#features" aria-label="Permalink to &quot;Features&quot;">​</a></h2><p>The plugin API can currently do a few things:</p><ul><li>Custom data stores: Allows creation of custom <a href="https://pinia.vuejs.org/" target="_blank" rel="noreferrer">pinia</a> data stores. The custom data in those stores can then be serialised by the engine and added to game save files. UI can also use values from data stores</li><li>Custom menu buttons and tabs: Allows adding new menu buttons or tabs in existing menus which will display any Vue.js component passed to it</li><li>Custom Commands: Create custom commands for the narrat scripring language, using the same API as the built-in commands</li><li>Various lifecycle hooks: Lifecycle hooks on page load, engine load, game start, and more, to run custom logic</li><li>Access to built-in data stores: All the data stores used in the engine for managing the various features can be used by plugins to manipulate any game data</li><li>Access to config and other utilities: The engine exports various utilities used internally and also the API to access the game&#39;s config</li></ul><h2 id="how-to-use" tabindex="-1">How to use <a class="header-anchor" href="#how-to-use" aria-label="Permalink to &quot;How to use&quot;">​</a></h2><p>There is a <a href="https://github.com/liana-p/narrat-engine/tree/main/packages/narrat-plugin-counter" target="_blank" rel="noreferrer">sample plugin</a> in the narrat repo which serves as an example of how to use the plugin API. This plugin is a self-contained project that can be built and exported as an npm package to import and use in any narrat game.</p><ul><li><p>The <code>src/plugin.ts</code> file is the entry point for the plugin which is what gets exported and used.</p></li><li><p>The <code>src/demo.ts</code> file is the entry point for running the plugin in dev mode, which starts a self-contained demo of narrat running the plugin</p></li></ul><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Plugins need to be registered with narrat by calling <code>registerPlugin</code>, as is done in the <code>demo.ts</code> file.</p></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>The sample plugin uses a bit of many features of the plugun API, so it&#39;s a good place to start if you want to see how everything works</p></div><h2 id="how-to-create-a-plugin-library" tabindex="-1">How to create a plugin library <a class="header-anchor" href="#how-to-create-a-plugin-library" aria-label="Permalink to &quot;How to create a plugin library&quot;">​</a></h2><p>There is a <a href="https://github.com/liana-p/narrat-engine/tree/main/packages/create-narrat-plugin" target="_blank" rel="noreferrer">create-narrat-plugin</a> package which is similar to the create-narrat tool used to start new games.</p><p>By runnning:</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">npm</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> create narrat-plugin@latest</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>A new project containing a plugin will be created. The template used is the sample counter plugin above</p><h2 id="how-to-create-a-plugin-directly-in-a-project" tabindex="-1">How to create a plugin directly in a project <a class="header-anchor" href="#how-to-create-a-plugin-directly-in-a-project" aria-label="Permalink to &quot;How to create a plugin directly in a project&quot;">​</a></h2><p>If making a plugin as a library isn&#39;t needed, it is possible to simply add plugin code directly in a narrat project to avoid having to build a complete package just for a plugin.</p><p>In <code>src/index.ts</code>, it is possible to directly create a plugin class (similarly to what&#39;s done in <code>plugin.ts</code> in the sample plugin) and register it directly there. This allows developing the plugin and the game alongside each other easily</p><h2 id="finding-out-more-about-the-api" tabindex="-1">Finding out more about the API <a class="header-anchor" href="#finding-out-more-about-the-api" aria-label="Permalink to &quot;Finding out more about the API&quot;">​</a></h2><p>The API isn&#39;t very documented yet, but looking at the example can help. Some relevant useful files to look at:</p><ul><li><a href="https://github.com/liana-p/narrat-engine/blob/main/packages/narrat/src/exports/plugins.ts" target="_blank" rel="noreferrer">plugins.ts</a>: The <code>NarratPluginObject</code> interface there exports the expected interface for a plugin and can be a good starting point to see available options</li><li><a href="https://github.com/liana-p/narrat-engine/tree/main/packages/narrat/src/exports" target="_blank" rel="noreferrer">exports folder</a>: The exports folder in the narrat package contains all the files exporting the public narrat API, which can help with finding what can be imported for use in plugins</li></ul></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("plugins/plugins.md");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const plugins = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender]]);
export {
  __pageData,
  plugins as default
};
