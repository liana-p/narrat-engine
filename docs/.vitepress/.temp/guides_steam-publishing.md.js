import { ssrRenderAttrs } from "vue/server-renderer";
import { useSSRContext } from "vue";
import { _ as _export_sfc } from "./plugin-vue_export-helper.yVxbj29m.js";
const __pageData = JSON.parse(`{"title":"Publishing on Steam (Steamworks integration)","description":"If you've made a narrat game, you might want to release it on Steam. This page explains how","frontmatter":{"description":"If you've made a narrat game, you might want to release it on Steam. This page explains how"},"headers":[],"relativePath":"guides/steam-publishing.md","filePath":"guides/steam-publishing.md","lastUpdated":1706968256000}`);
const _sfc_main = { name: "guides/steam-publishing.md" };
function _sfc_ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {
  _push(`<div${ssrRenderAttrs(_attrs)}><h1 id="publishing-on-steam-steamworks-integration" tabindex="-1">Publishing on Steam (Steamworks integration) <a class="header-anchor" href="#publishing-on-steam-steamworks-integration" aria-label="Permalink to &quot;Publishing on Steam (Steamworks integration)&quot;">​</a></h1><h2 id="narrat-steamworks-integration" tabindex="-1">Narrat Steamworks integration <a class="header-anchor" href="#narrat-steamworks-integration" aria-label="Permalink to &quot;Narrat Steamworks integration&quot;">​</a></h2><p>narrat now has a <a href="https://partner.steamgames.com/" target="_blank" rel="noreferrer">Steamworks</a> integration by default in the template. It should allow any narrat game to run on Steam with basic integration (the Steam overlay works).</p><p>For a primer on how to generally build and export narrat games, see the <a href="/guides/building-and-exporting.html">building and exporting</a> guide</p><h2 id="how-to-build-for-steam" tabindex="-1">How to build for Steam <a class="header-anchor" href="#how-to-build-for-steam" aria-label="Permalink to &quot;How to build for Steam&quot;">​</a></h2><p>The integration is brand new so there are a few manual steps to setting up the integration. This might change in the future to be easier to use</p><h2 id="first-time-setup" tabindex="-1">First time setup <a class="header-anchor" href="#first-time-setup" aria-label="Permalink to &quot;First time setup&quot;">​</a></h2><ol><li>Create a game with the latest narrat template. (If updating an existing game, the simplest way would probably be to copy-paste the config, scripts and assets of the game and paste them into a brand new setup of the narrat template)</li><li>Edit <code>steam_appid.txt</code> at the root of the repo and put the desired steam app id. The default (<code>480</code>) is fine to use during development as it is the Steam default testing app.</li><li>In <code>electron-main.js</code>, near the top of the file, set <code>useSteam</code> to true</li><li>In <code>src/index.ts</code>, near the top of the file, set <code>useSteam</code> to true</li></ol><h2 id="running-in-steam-and-packaging-for-steam" tabindex="-1">Running in Steam and packaging for Steam <a class="header-anchor" href="#running-in-steam-and-packaging-for-steam" aria-label="Permalink to &quot;Running in Steam and packaging for Steam&quot;">​</a></h2><p>Steam needs to be running for a game using Steamworks to work properly, and you need to own the app matching the Steam app id being used.</p><p>To run the app directly, use <code>npm run electron</code> (after building the game) or <code>npm run run</code> (to build the game and then run electron automatically). The Steam overlay should work when doing this.</p><p>To package the game for release, run <code>npm run package</code>. The game will be in the <code>out</code> folder.</p><h2 id="adding-the-game-to-steam" tabindex="-1">Adding the game to Steam <a class="header-anchor" href="#adding-the-game-to-steam" aria-label="Permalink to &quot;Adding the game to Steam&quot;">​</a></h2><p>With the game built in the <code>out</code> folder, it is possible to go in Steam and choose <code>Add non-Steam game</code>, then browse to the path of the <code>narrat-template.exe</code> inside the subfolders in <code>out</code> folder, and add that .exe to Steam. It is then possible to run the game in Steam.</p><p>To actually publish the game to Steam, you should look at Steam&#39;s documentation on how to become an approved partner and publishing your app, but the app exported in the <code>out</code> folder should work on Steam</p><h2 id="known-limitations" tabindex="-1">Known limitations <a class="header-anchor" href="#known-limitations" aria-label="Permalink to &quot;Known limitations&quot;">​</a></h2><ul><li>The system currently only builds for windows 64 bit. To change that, you would need to edit the part of the <code>package</code> script in <code>package.json</code> that copies the <code>steam_appid.txt</code> to copy from the right folder depending on the architecture you&#39;re targeting.</li><li>There is currently no usage of specific Steam features (like achievements or others). Feel free to write a plugin for advanced features you may need, as the <a href="https://github.com/ceifa/steamworks.js" target="_blank" rel="noreferrer">Steamworks.js libray</a> used should enable most use cases. For more info on how Steam was integrated into narrat, see <a href="https://www.liana.one/integrate-electron-steam-api-steamworks" target="_blank" rel="noreferrer">this blog post</a></li></ul></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("guides/steam-publishing.md");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const steamPublishing = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender]]);
export {
  __pageData,
  steamPublishing as default
};
