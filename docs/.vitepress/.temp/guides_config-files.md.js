import { ssrRenderAttrs, ssrRenderStyle } from "vue/server-renderer";
import { useSSRContext } from "vue";
import { _ as _export_sfc } from "./plugin-vue_export-helper.yVxbj29m.js";
const __pageData = JSON.parse('{"title":"Config files","description":"A narrat game needs various config files to function","frontmatter":{"description":"A narrat game needs various config files to function"},"headers":[],"relativePath":"guides/config-files.md","filePath":"guides/config-files.md","lastUpdated":1698513983000}');
const _sfc_main = { name: "guides/config-files.md" };
function _sfc_ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {
  _push(`<div${ssrRenderAttrs(_attrs)}><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>There have been recent changes to the config files to add the <a href="./../features/config-hot-reloading.html">live reloading</a> feature to them. The documentation may not be fully updated for this.</p><p>The main important change is that config files are now in the <code>src/config</code> folder instead of the <code>public/data</code> folder. The main <code>config.yaml</code> also becomes <code>common.yaml</code>, and the parts of <code>config.yaml</code> which specify the paths of other config files can be deleted.</p><p>Everything else is the same as before</p></div><h1 id="config-files" tabindex="-1">Config files <a class="header-anchor" href="#config-files" aria-label="Permalink to &quot;Config files&quot;">​</a></h1><p>Config files are all written in <a href="https://fileinfo.com/extension/yaml" target="_blank" rel="noreferrer">yaml</a> by default, though you can also use json (this is not encouraged).</p><h2 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-label="Permalink to &quot;Introduction&quot;">​</a></h2><p>A narrat game needs a few config files to function. For example the main <code>common.yaml</code> is where a lot of settings are configured, and <code>characters.yaml</code> is where the various characters that can speak in the game are setup. On top of that, there are config files for specific features (like <code>items.yaml</code> or <code>skills.yaml</code>).</p><p>There are example files available, and games already come with config files setup.</p><p><a href="./../examples/example-config.html">example-config.md</a></p><h2 id="editing-the-config" tabindex="-1">Editing the config <a class="header-anchor" href="#editing-the-config" aria-label="Permalink to &quot;Editing the config&quot;">​</a></h2><p>By default the config files should be in <code>src/config</code>. If you want to change its position, edit <code>src/index.ts</code> to have the correct path to your new localisation.</p><p>The <code>index.ts</code> file in <code>src/config</code> is the one importing and combining all the config file, so if you need to add, remove or move config files, you will need to update <code>index.ts</code> accordingly.</p><p>The <code>config.yaml</code> file is a <a href="https://fileinfo.com/extension/yaml" target="_blank" rel="noreferrer">yaml</a> file which should already contain everything necessary if using the template, but some optional values can be omitted. For an example config file, look at the <a href="./../examples/example-config.html">example configs page</a>. It may also be relevant to look at other yaml files in the example games.</p><h2 id="other-config-files" tabindex="-1">Other config files <a class="header-anchor" href="#other-config-files" aria-label="Permalink to &quot;Other config files&quot;">​</a></h2><p>Many parts of config.yaml list a path to another <code>.yaml</code> file. This is to separate config into manageable chunks where you only edit the file relevant to a feature (like <code>skills.yaml</code>, or <code>items.yaml</code>).</p><p>The various features and guides sections of this documentation can give more information about how to use each option.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>The <a href="https://github.com/liana-p/narrat-engine/tree/main/packages/narrat/examples/games" target="_blank" rel="noreferrer">examples folder</a> of narrat contains the config for a bunch of example games, which can help you discover available options.</p></div><h2 id="validation" tabindex="-1">Validation <a class="header-anchor" href="#validation" aria-label="Permalink to &quot;Validation&quot;">​</a></h2><p><strong>Config files are validated by the engine</strong>. This means when running the game, the engine will show error messages explaining any missing or incorrect values in config files. <strong>This ensures configuration files are always correct.</strong></p><h2 id="config-options" tabindex="-1">Config options <a class="header-anchor" href="#config-options" aria-label="Permalink to &quot;Config options&quot;">​</a></h2><p>There are many possible options in the config. They are not currently all documented, but <strong>the documentation for a specific feature often shows or explains the relevant config</strong>.</p><details class="details custom-block"><summary><strong>Finding out possible config options from the source (advanced usage)</strong></summary><p><strong>More advanced use:</strong> To see the exact definition of config files and their options, look in the <a href="https://github.com/liana-p/narrat-engine/tree/main/packages/narrat/src/config" target="_blank" rel="noreferrer">config folder of the engine code</a>. This is where all the possible config options are defined in a json-schema format. This is harder to read, but it is the actual source that defines the possible options in the code, and is likely to be the most up to date way of finding out possible options.</p><p>For example:</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">export</span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}"> const</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}"> ObjectiveDataSchema</span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}"> =</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> Type.</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">Object</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">({</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">  description: Type.</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">String</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">(),</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">  hidden: Type.</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">Optional</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">(Type.</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">Boolean</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">()),</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">});</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">export</span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}"> const</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}"> QuestDataSchema</span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}"> =</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> Type.</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">Object</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">({</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">  title: Type.</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">String</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">(),</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">  description: Type.</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">String</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">(),</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">  objectives: Type.</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">Record</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">(Type.</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">String</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">(), ObjectiveDataSchema),</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>This quest config means a quest has the following properties:</p><ul><li>title: A mandatory string value</li><li>description: A mandatory string value</li><li>objectives: A key-value list of objectives defined in the ObjectiveDataSchema</li></ul><p>Then, an objective config has:</p><ul><li>description: A mandatory string</li><li>hidden: An <strong>optional</strong> boolean value</li></ul></details><h2 id="how-the-config-works" tabindex="-1">How the config works <a class="header-anchor" href="#how-the-config-works" aria-label="Permalink to &quot;How the config works&quot;">​</a></h2><p>The engine follows this process for loading the config:</p><ul><li>Each config section has a <strong>default config</strong>. This default config exists to provide default values to options that don&#39;t need to be changed by default</li><li>The engine loads the <strong>game&#39;s config files</strong>. Those are the files coming from the game itself</li><li>Each <strong>default config is merged with the game&#39;s config</strong> so that whatever the game customised overrides what&#39;s in the default options</li></ul><h2 id="characters-config" tabindex="-1">Characters config <a class="header-anchor" href="#characters-config" aria-label="Permalink to &quot;Characters config&quot;">​</a></h2><p>Additionally to <code>config.yaml</code>, there is a separate <code>characters.yaml</code> file containing the config for all characters in the game.</p><p>See more info at the <a href="./../features/characters-and-portraits.html">characters and portraits guide</a></p><h3 id="other-config-files-1" tabindex="-1">Other config files <a class="header-anchor" href="#other-config-files-1" aria-label="Permalink to &quot;Other config files&quot;">​</a></h3><p>There are individual config files for most narrat features which you can edit. The best way to learn about them is to look at example games and see how they are used.</p><ul><li><a href="https://github.com/liana-p/narrat-engine/tree/main/packages/narrat/examples/games" target="_blank" rel="noreferrer">Example test games in the narrat repo</a></li><li><a href="https://github.com/liana-p/narrat-examples" target="_blank" rel="noreferrer">Example games in the narrat-examples repo</a></li></ul></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("guides/config-files.md");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const configFiles = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender]]);
export {
  __pageData,
  configFiles as default
};
