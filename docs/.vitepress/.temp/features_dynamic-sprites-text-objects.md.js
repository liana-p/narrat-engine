import { ssrRenderAttrs, ssrRenderStyle } from "vue/server-renderer";
import { useSSRContext } from "vue";
import { _ as _export_sfc } from "./plugin-vue_export-helper.yVxbj29m.js";
const __pageData = JSON.parse('{"title":"Dynamic sprites, text and objects in viewport","description":"Narrat games can have dynamic sprites and text created by scripts during the game which appear in the viewport.","frontmatter":{"title":"Dynamic sprites, text and objects in viewport","description":"Narrat games can have dynamic sprites and text created by scripts during the game which appear in the viewport."},"headers":[],"relativePath":"features/dynamic-sprites-text-objects.md","filePath":"features/dynamic-sprites-text-objects.md","lastUpdated":1690835709000}');
const _sfc_main = { name: "features/dynamic-sprites-text-objects.md" };
function _sfc_ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {
  _push(`<div${ssrRenderAttrs(_attrs)}><h1 id="screen-objects" tabindex="-1">Screen Objects <a class="header-anchor" href="#screen-objects" aria-label="Permalink to &quot;Screen Objects&quot;">​</a></h1><p>Screen objects are dynamic sprites and texts which are not defined in the config but instead created dynamically in sprite.</p><p>This enables games to place custom interactive elements on the screen programmatically, without requiring every possible element to have been configured previously.</p><h2 id="how-it-works" tabindex="-1">How it works <a class="header-anchor" href="#how-it-works" aria-label="Permalink to &quot;How it works&quot;">​</a></h2><p>While screens and buttons are static (defined in the config once and can&#39;t change), screen objects (sprites and texts) are created dynamically and can be updated.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Screen objects are rendered as HTML divs, similarly to buttons, but narrat scripting has no way to make them smoothly move for &quot;action&quot; 2D gameplay. If you want to do some 2D game programming with real-time or complex graphics, you should consider using a 2D game engine like in the <a href="https://github.com/liana-p/narrat-engine/tree/main/packages/narrat-2d" target="_blank" rel="noreferrer">narrat-2d</a> plugin.</p></div><p>In any narrat script, you can create a sprite:</p><div class="language-narrat vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">narrat</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">main</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">  set</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> data.my_sprite (create_sprite img/sprites/my_sprite.png </span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">150</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}"> 150</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">) </span><span style="${ssrRenderStyle({ "--shiki-light": "#6A737D", "--shiki-dark": "#6A737D" })}">// Creates a sprite using my_sprite.png at position 150, 150</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">  set</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> data.my_text (create_object </span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">50</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}"> 50</span><span style="${ssrRenderStyle({ "--shiki-light": "#E36209", "--shiki-dark": "#FFAB70" })}"> $data.my_sprite</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">) </span><span style="${ssrRenderStyle({ "--shiki-light": "#6A737D", "--shiki-dark": "#6A737D" })}">// Creates a screen object at position 50,50, as a child of the sprite. Position is relative to the parent</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">  set</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> data.my_text.text </span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">&quot;Hello world!&quot;</span><span style="${ssrRenderStyle({ "--shiki-light": "#6A737D", "--shiki-dark": "#6A737D" })}"> // Give a text to the object</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">  jump</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> move_sprite</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">move_sprite</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">  choice</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">  &quot;Where should I move the sprite?&quot;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">    &quot;Left&quot;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">      add data.my_sprite.x -</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">100</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">    &quot;Right&quot;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">      add data.my_sprite.x </span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">100</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">    &quot;Up&quot;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">      add data.my_sprite.y -</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">100</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">    &quot;Down&quot;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">      add data.my_sprite.y </span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">100</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h2 id="examples" tabindex="-1">Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;Examples&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>The <a href="https://github.com/liana-p/narrat-engine/tree/main/packages/narrat/src/examples/rpg/scripts" target="_blank" rel="noreferrer">RPG example</a> uses sprites.</p><p>The <a href="https://github.com/liana-p/narrat-examples/tree/main/spoon-survival" target="_blank" rel="noreferrer">Spoon Survival</a> example game also uses sprites.</p></div><h2 id="scene-graph" tabindex="-1">Scene graph <a class="header-anchor" href="#scene-graph" aria-label="Permalink to &quot;Scene graph&quot;">​</a></h2><p>Screen objects are rendered in a scene graph, where elements can have children, and every element has a parent (except the top-level ones).</p><p>Whenever creating a screen object, passing another screen object as the last parameter will make it the parent, as in the example above.</p><h2 id="options" tabindex="-1">Options <a class="header-anchor" href="#options" aria-label="Permalink to &quot;Options&quot;">​</a></h2><p>Screen objects are just <a href="./../scripting/language-syntax.html#objects">objects</a> that contain properties that define how they should be displayed.</p><p>You can simply set properties of the variable that the <code>create_sprite</code> or <code>create_object</code> function returned to modify the object, like in the example above.</p><p>Available properties to change (all of them are optional, the only mandatory ones are the ones passed to <code>create_sprite</code> or <code>create_object</code>, as above):</p><ul><li><code>name</code>: A name, not really used yet but useful to tell sprites apart for debugging</li><li><code>x</code>: The x position of the object in pixels</li><li><code>y</code>: The y position of the object in pixels</li><li><code>anchor</code>: An object with x and y properties for the anchor of the object between 0 and 1. 0 means rendered from left corner, 1 means from right corner. An anchor of 0.5,0.5 would be rendering from the center <ul><li><code>x</code>: The x anchor of the object</li><li><code>y</code>: The y anchor of the object</li></ul></li><li><code>width</code>: The width of the object in pixels. <strong>Note: For sprites this will be set automatically to the size of the image</strong></li><li><code>height</code>: The height of the object in pixels. <strong>Note: For sprites this will be set automatically to the size of the image</strong></li><li><code>opacity</code>: Opacity between 0 and 1</li><li><code>scale</code>: The width and height of the object will be multiplied by this number if present</li><li><code>layer</code>: Which viewport layer to render the sprite on. If on layer 1, the sprite will render in front of the screen on layer 1, but behind the screen in layer 2. <strong>Note: If a layer has no active screen, sprites won&#39;t be rendered there. If needed you can create <a href="./../features/viewport.html#empty-screens">empty placeholder screens</a> so that sprites on a layer are rendered</strong>.</li><li><code>cssClass</code>: An optional CSS class name to give to the sprite. This allows you to apply custom CSS styling to any sprites</li><li><code>onClick</code>: A label to run when the sprite is clicked. Example: <code>set data.mySprite.onClick my_label</code>, or if you want to pass arguments: <code>set data.mySprite.onClick clicked_sprite my_argument</code>.</li></ul><h2 id="difference-between-sprite-and-object" tabindex="-1">Difference between sprite and object <a class="header-anchor" href="#difference-between-sprite-and-object" aria-label="Permalink to &quot;Difference between sprite and object&quot;">​</a></h2><p>Sprites are screen objects that also render an image. Normal screen objects contain nothing by default and are just an empty div.</p><p>Adding a text to a screen object adds a text inside the div.</p><h2 id="note-on-images-preloading" tabindex="-1">Note on images preloading <a class="header-anchor" href="#note-on-images-preloading" aria-label="Permalink to &quot;Note on images preloading&quot;">​</a></h2><p>Any <strong>images used in sprites won&#39;t be preloaded by default</strong>, because the engine doesn&#39;t know about them.</p><p>If you need to preload them, add them to the list of images in the <code>config.yaml</code>:</p><div class="language-yaml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#22863A", "--shiki-dark": "#85E89D" })}">images</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#22863A", "--shiki-dark": "#85E89D" })}">  mySprite</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">: </span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">img/sprites/my-sprite.png</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Then you can directly refer to the name of the image instead of using its full path in your code:</p><div class="language-narrat vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">narrat</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">main</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">  set</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> data.my_sprite (create_sprite mySprite </span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">150</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}"> 150</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">) </span><span style="${ssrRenderStyle({ "--shiki-light": "#6A737D", "--shiki-dark": "#6A737D" })}">// Creates a sprite using my_sprite.png at position 150, 150</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("features/dynamic-sprites-text-objects.md");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const dynamicSpritesTextObjects = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender]]);
export {
  __pageData,
  dynamicSpritesTextObjects as default
};
