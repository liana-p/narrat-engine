import { ssrRenderAttrs, ssrRenderStyle } from "vue/server-renderer";
import { useSSRContext } from "vue";
import { _ as _export_sfc } from "./plugin-vue_export-helper.yVxbj29m.js";
const __pageData = JSON.parse('{"title":"Set Screen","description":"The set_screen function allows changing visual screens","frontmatter":{"description":"The set_screen function allows changing visual screens"},"headers":[],"relativePath":"commands/left-side-viewport-commands/set-screen.md","filePath":"commands/left-side-viewport-commands/set-screen.md","lastUpdated":1688510638000}');
const _sfc_main = { name: "commands/left-side-viewport-commands/set-screen.md" };
function _sfc_ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {
  _push(`<div${ssrRenderAttrs(_attrs)}><h1 id="set-screen" tabindex="-1">Set Screen <a class="header-anchor" href="#set-screen" aria-label="Permalink to &quot;Set Screen&quot;">​</a></h1><p>The <code>set_screen</code> function allows switching between different screens</p><p>Syntax: <code>set_screen [screenId] [layer (optional)]</code></p><p>Example:</p><div class="language-narrat vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">narrat</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">set_screen map</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="layers" tabindex="-1">Layers <a class="header-anchor" href="#layers" aria-label="Permalink to &quot;Layers&quot;">​</a></h2><p>Screens can use layers, to make it possible to overlay screens on top of each other. By passing a number as the second parameter to <code>set_screen</code>, it will set a screen on this layer. Example:</p><div class="language-narrat vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">narrat</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">main</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">  set_screen</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> game_background </span><span style="${ssrRenderStyle({ "--shiki-light": "#6A737D", "--shiki-dark": "#6A737D" })}">// will set the screen game_background on layer 0</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">  set_screen</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> flashing_overlay </span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">1</span><span style="${ssrRenderStyle({ "--shiki-light": "#6A737D", "--shiki-dark": "#6A737D" })}"> // Will set the screen flashing_overlay on layer 1, displaying it above the background</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>See <a href="./../../features/viewport.html">Screens guide</a> for more info</p><h3 id="placeholder-screens" tabindex="-1">Placeholder screens <a class="header-anchor" href="#placeholder-screens" aria-label="Permalink to &quot;Placeholder screens&quot;">​</a></h3><p>Sometimes you might want placeholder screens that are empty and don&#39;t need a background image. See <a href="./../../features/viewport.html#empty-screens">Empty screens</a> for more info.</p></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("commands/left-side-viewport-commands/set-screen.md");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const setScreen = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender]]);
export {
  __pageData,
  setScreen as default
};
